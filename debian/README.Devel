Development of the Debian PostgreSQL packages
=============================================

Package structure
-----------------
To keep the maintenance of the packages as easy as possible, as much
packaging logic as possible should be put into postgresql-common. The
server packages (postgresql-X.Y) should not contain any conffile but
a generic init script (which just calls hook functions shipped by
postgresql-common). Likewise, their maintainer scripts should only
call the hooks offered by postgresql-common.

This structure makes it easy to fix packaging bugs for all available
major versions by only uploading a new version of the small
postgresql-common package. It also keeps the effort of packaging a new
major version as small as possible.

Revision control system
-----------------------
Package development happens with the "bazaar-ng" distributed revision
control system. This allows anybody to create and develop a personal
branch of the official archive without having write access to the
official archive.

If you want to help with developing the packages, you should work with
bazaar-ng to benefit from the features of a revision control system; this
will also allow the Debian maintainers to easily merge your changes
into the official packages.

For more information about bazaar-ng and getting Debian packages,
please see http://www.bazaar-ng.org.

The official Debian packages are built from Martin Pitt's branches
which are available at

  http://arch.debian.org/arch/pkg-postgresql/mpitt

This directory contains the following repositories:

  common     (postgresql-common package)
  transition (postgresql Sarge->Etch transition package)
  7.4        (all available major versions)
  8.0
  8.1

The orig.tar.gz files are not kept under revision control since they
would only bloat the archive. They need to be downloaded separately
from

  http://arch.debian.org/arch/pkg-postgresql/

or from any Debian mirror.

Creating your personal branch
-----------------------------
First, please make sure that bzr can figure out a correct email
address with

 $ bzr whoami

If it is not correct, please set the $EMAIL environment variable.

If you want to help with the package development or just want to
develop a feature you need, you should create your own branch where
you can commit to. As an example, let's create a branch of the
postgresql-common package:

  $ bzr branch http://arch.debian.org/arch/pkg-postgresql/mpitt/common/

Now you can happily use "bzr diff", "bzr commit", "bzr add", "baz
pull", "bzr merge", and all the other features of revision control.

Publishing your branch
----------------------
The prefered method of publishing your branch is to put it to a
http-accessible directory. Basically, you just need to copy the
directory that contains your personal branch to a directory of your
webserver; you can use "scp -r", rsync, or any other method of your
choice for that (just make sure that you copy the hidden .bzr
directory, too). However, if you install the "bzrtools" package and
want to push your changes to an ssh-accessible remote directory, you
can do this more conveniently with e. g.

  bzr push myuser@my.server.com:public_html/bzr/psql/common

This will use rsync over ssh to create or update the remote branch.

After this initial command, "bzr push" is enough for subsequent
pushes, bzr remembers the last push location. This way you can keep
your remote branch up to date.

If you developed a particular feature or bug fix and would like to see
it in the official package, please send a mail to
pkg-postgresql-public@lists.alioth.debian.org or to mpitt@debian.org,
and state the URL of your branch.

Test suite
----------
To be written.

 -- Martin Pitt <mpitt@debian.org>
